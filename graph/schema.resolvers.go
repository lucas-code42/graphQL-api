package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"github.com/lucas-code42/graphql-api/graph/model"
)

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, input model.NewAccount) (*model.Account, error) {
	account, err := r.Account.Insert(input.Name, input.ProgrammingLanguage)
	if err != nil {
		return nil, err
	}
	return &model.Account{
		Name:                account.Name,
		ProgrammingLanguage: account.ProgrammingLanguage,
	}, nil
}

// Accounts is the resolver for the Accounts field.
func (r *queryResolver) Accounts(ctx context.Context) ([]*model.Account, error) {
	accounts, err := r.Account.GetAll()
	if err != nil {
		return nil, err
	}

	var modelAccounts []*model.Account
	for _, v := range accounts {
		modelAccounts = append(modelAccounts, &model.Account{
			Name:                v.Name,
			ProgrammingLanguage: v.ProgrammingLanguage,
		})
	}

	return modelAccounts, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
